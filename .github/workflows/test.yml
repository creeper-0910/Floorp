# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Please write our copyright if you use this file.
# © 2023 Floorp Projects & Contributors

name: Build & Publish

on: workflow_dispatch

jobs:
  build-with-enable-profile-generate:
    name: Build with --enable-profile-generate

    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        runs-on: ["ubuntu-latest"]

    steps:
    - name: Init
      run: |
        export RUNNER_USERDIR=`echo ~`
        echo "RUNNER_USERDIR=$RUNNER_USERDIR" >> $GITHUB_ENV

    - name: Clean up (Self-hosted only)
      if: contains(matrix.runs-on, 'self-hosted')
      run: |
        rm -rf $RUNNER_USERDIR/output
        rm -rf $RUNNER_USERDIR/win-cross
        rm -rf $RUNNER_USERDIR/.mozbuild
        rm -rf $RUNNER_USERDIR/.cargo
        rm -rf $RUNNER_USERDIR/l10n-central
        rm -rf $GITHUB_WORKSPACE
        mkdir $GITHUB_WORKSPACE

    - name: Change PPA mirror servers
      run: |
        sudo perl -p -i -e 's%(deb(?:-src|)\s+)https?://(?!archive\.canonical\.com|security\.ubuntu\.com)[^\s]+%$1http://archive.ubuntu.com/ubuntu/%' /etc/apt/sources.list
        sudo apt update

    - name: Setup Disk & Swap Space 💿
      if: matrix.runs-on == 'ubuntu-22.04' || matrix.runs-on == 'ubuntu-latest'
      run: |
        echo Before:
        free -h
        df -h

        echo
        echo

        sudo swapoff /mnt/swapfile
        sudo rm /mnt/swapfile
        sudo fallocate -l 10G /mnt/swapfile
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile

        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc

        sudo fallocate -l 10G /home/runner/swapfile2
        sudo chmod 600 /home/runner/swapfile2
        sudo mkswap /home/runner/swapfile2
        sudo swapon /home/runner/swapfile2

        echo
        echo

        echo After:
        free -h
        df -h

    - uses: actions/checkout@v3
      name: Clone 🧬

    - name: Setup 🪛
      run: |
        mkdir -p $RUNNER_USERDIR/win-cross

        cp ./.github/mozconfig_win_pgo_base mozconfig
        echo 'ac_add_options --with-branding=browser/branding/official' >> mozconfig
        echo 'ac_add_options --enable-profile-generate=cross' >> mozconfig
        sudo apt update
        sudo apt install zstd p7zip-full

        echo Setup wine
        aria2c "https://firefox-ci-tc.services.mozilla.com/api/index/v1/task/gecko.cache.level-1.toolchains.v3.linux64-wine.latest/artifacts/public%2Fbuild%2Fwine.tar.zst" -o wine.tar.zst
        tar --zstd -xvf wine.tar.zst -C $RUNNER_USERDIR/win-cross
        rm wine.tar.zst

        echo Replace rustc
        aria2c "https://firefox-ci-tc.services.mozilla.com/api/index/v1/task/gecko.cache.level-3.toolchains.v3.linux64-rust-windows-1.68.latest/artifacts/public%2Fbuild%2Frustc.tar.zst" -o rustc.tar.zst
        tar --zstd -xvf rustc.tar.zst -C $RUNNER_USERDIR/win-cross
        echo 'export RUSTC="$RUNNER_USERDIR/win-cross/rustc/bin/rustc"' >> mozconfig
        
        echo Setup Visual Studio
        sudo apt install -y msitools python3-pip
        ./mach python --virtualenv build taskcluster/scripts/misc/get_vs.py build/vs/vs2019.yaml $RUNNER_USERDIR/win-cross/vs2019
        chmod -R +x "$RUNNER_USERDIR/win-cross/vs2019"

        ./mach --no-interactive bootstrap --application-choice browser
        echo "export LIB=\"$(cd $RUNNER_USERDIR/.mozbuild/clang/lib/clang/* && cd lib/windows && pwd)\"" >> mozconfig
        $RUNNER_USERDIR/.cargo/bin/rustup target add x86_64-pc-windows-msvc

        export DISPLAY_VERSION=`cat browser/config/version_display.txt`
        export UPDATE_CHANNEL="release"
        echo "DISPLAY_VERSION=$DISPLAY_VERSION" >> $GITHUB_ENV
        echo "UPDATE_CHANNEL=$UPDATE_CHANNEL" >> $GITHUB_ENV

    - name: Build 🔨
      run: |
        ./mach build

    - name: Package 📦
      run: |
        ./mach package

    - name: Copy 📂
      run: |
        mkdir $RUNNER_USERDIR/output
        cp -r obj-x86_64-pc-mingw32/dist/floorp $RUNNER_USERDIR/output/

    - name: Publish 🎁
      uses: actions/upload-artifact@master
      with:
        name: floorp-windows-x86_64-build-with-enable-profile-generate
        path: ${{ env.RUNNER_USERDIR }}/output

  generate-profdata-and-jarlog:
    name: Generate profdata and jarlog

    needs: build-with-enable-profile-generate
    runs-on: windows-2022

    steps:
    - uses: actions/download-artifact@v3
      name: Download artifact 📥
      with:
        name: floorp-windows-x86_64-build-with-enable-profile-generate
        path: C:\artifact

    - uses: actions/checkout@v3
      name: Clone 🧬

    - name: Setup 🪛
      run: |
        (New-Object System.Net.WebClient).DownloadFile("https://ftp.mozilla.org/pub/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe","C:\MozillaBuildSetup-Latest.exe")
        C:\MozillaBuildSetup-Latest.exe /S | out-null
    
    - name: Generate 🔄
      run: |
        $workspace_dir = [regex]::replace($env:GITHUB_WORKSPACE, "^([A-Z]):", { "/" + $args.value.Substring(0, 1).toLower() }) -replace "\\","/"

        echo "cd $workspace_dir" '' >> mozilla-build-run.sh
        echo 'export PATH=/c/mozilla-build/msys2/usr/bin:$PATH' '' >> mozilla-build-run.sh
        echo './mach --no-interactive bootstrap --application-choice browser' '' >> mozilla-build-run.sh
        echo 'LLVM_PROFDATA=/c/Users/runneradmin/.mozbuild/clang/bin/llvm-profdata.exe JARLOG_FILE=en-US.log ./mach python build/pgo/profileserver.py --binary /c/artifact/floorp/floorp.exe' '' >> mozilla-build-run.sh
        C:\mozilla-build\start-shell.bat $workspace_dir\mozilla-build-run.sh
        
    - name: Publish 🎁
      uses: actions/upload-artifact@master
      with:
        name: floorp-windows-x86_64-profdata-and-jarlog
        path: |
          merged.profdata
          en-US.log

  build-with-profdata-and-jarlog:
    name: Build with profdata and jarlog

    needs: generate-profdata-and-jarlog
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        runs-on: ["ubuntu-latest"]

    steps:
    - name: Init
      run: |
        export RUNNER_USERDIR=`echo ~`
        echo "RUNNER_USERDIR=$RUNNER_USERDIR" >> $GITHUB_ENV

    - name: Change PPA mirror servers
      run: |
        sudo perl -p -i -e 's%(deb(?:-src|)\s+)https?://(?!archive\.canonical\.com|security\.ubuntu\.com)[^\s]+%$1http://archive.ubuntu.com/ubuntu/%' /etc/apt/sources.list
        sudo apt update

    - name: Setup Disk & Swap Space 💿
      if: matrix.runs-on == 'ubuntu-22.04' || matrix.runs-on == 'ubuntu-latest'
      run: |
        echo Before:
        free -h
        df -h

        echo
        echo

        sudo swapoff /mnt/swapfile
        sudo rm /mnt/swapfile
        sudo fallocate -l 10G /mnt/swapfile
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile

        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc

        sudo fallocate -l 10G /home/runner/swapfile2
        sudo chmod 600 /home/runner/swapfile2
        sudo mkswap /home/runner/swapfile2
        sudo swapon /home/runner/swapfile2

        echo
        echo

        echo After:
        free -h
        df -h

    - uses: actions/download-artifact@v3
      name: Download artifact 📥
      with:
        name: floorp-windows-x86_64-profdata-and-jarlog
        path: ${{ env.RUNNER_USERDIR }}/artifact

    - uses: actions/checkout@v3
      name: Clone 🧬

    - name: Clone l10n-central 🧬
      run: |
        git clone --depth 1 -b 11.0.0 https://github.com/Floorp-Projects/l10n-central.git $RUNNER_USERDIR/l10n-central

    - name: Setup 🪛
      run: |
        mkdir -p $RUNNER_USERDIR/win-cross

        cp ./.github/mozconfig_win_pgo_base mozconfig
        echo 'ac_add_options --with-branding=browser/branding/official' >> mozconfig
        echo 'ac_add_options --with-l10n-base=$RUNNER_USERDIR/l10n-central/l10n-central' >> mozconfig
        echo 'ac_add_options --enable-profile-use=cross' >> mozconfig
        echo 'ac_add_options --with-pgo-profile-path=$RUNNER_USERDIR/artifact/merged.profdata' >> mozconfig
        echo 'ac_add_options --with-pgo-jarlog=$RUNNER_USERDIR/artifact/en-US.log' >> mozconfig
        sudo apt update
        sudo apt install zstd p7zip-full

        echo Setup wine
        aria2c "https://firefox-ci-tc.services.mozilla.com/api/index/v1/task/gecko.cache.level-1.toolchains.v3.linux64-wine.latest/artifacts/public%2Fbuild%2Fwine.tar.zst" -o wine.tar.zst
        tar --zstd -xvf wine.tar.zst -C $RUNNER_USERDIR/win-cross
        rm wine.tar.zst

        echo Replace rustc
        aria2c "https://firefox-ci-tc.services.mozilla.com/api/index/v1/task/gecko.cache.level-3.toolchains.v3.linux64-rust-windows-1.68.latest/artifacts/public%2Fbuild%2Frustc.tar.zst" -o rustc.tar.zst
        tar --zstd -xvf rustc.tar.zst -C $RUNNER_USERDIR/win-cross
        echo 'export RUSTC="$RUNNER_USERDIR/win-cross/rustc/bin/rustc"' >> mozconfig

        echo Setup Visual Studio
        sudo apt install -y msitools python3-pip
        ./mach python --virtualenv build taskcluster/scripts/misc/get_vs.py build/vs/vs2019.yaml $RUNNER_USERDIR/win-cross/vs2019
        chmod -R +x "$RUNNER_USERDIR/win-cross/vs2019"

        ./mach --no-interactive bootstrap --application-choice browser
        echo "export LIB=\"$(cd $RUNNER_USERDIR/.mozbuild/clang/lib/clang/* && cd lib/windows && pwd)\"" >> mozconfig
        $RUNNER_USERDIR/.cargo/bin/rustup target add x86_64-pc-windows-msvc

        export DISPLAY_VERSION=`cat browser/config/version_display.txt`
        export UPDATE_CHANNEL="release"
        echo "DISPLAY_VERSION=$DISPLAY_VERSION" >> $GITHUB_ENV
        echo "UPDATE_CHANNEL=$UPDATE_CHANNEL" >> $GITHUB_ENV

    - name: Build 🔨
      run: |
        ./mach build

    - name: Package 📦
      run: |
        ./mach package
        ./mach package-multi-locale --locales ar cs da de el en-GB en-US es-ES es-MX fr hu id it ja ko lt nl nn-NO pl pt-BR pt-PT ru sv-SE th vi zh-CN zh-TW

    - name: Copy 📂
      run: |
        mkdir $RUNNER_USERDIR/output
        cp obj-x86_64-pc-mingw32/dist/install/sea/floorp-*.en-US.win64.installer-stub.exe $RUNNER_USERDIR/output/
        cp obj-x86_64-pc-mingw32/dist/install/sea/floorp-*.en-US.win64.installer.exe $RUNNER_USERDIR/output/
        cp obj-x86_64-pc-mingw32/dist/floorp-*.en-US.win64.zip $RUNNER_USERDIR/output/

    - name: Publish 🎁
      uses: actions/upload-artifact@master
      with:
        name: please-use-this-floorp-windows-x86_64-package-build-with-profdata-and-jarlog
        path: ${{ env.RUNNER_USERDIR }}/output

  build-linux-x86_64-with-PGO:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Change PPA mirror servers
        run: |
         sudo perl -p -i -e 's%(deb(?:-src|)\s+)https?://(?!archive\.canonical\.com|security\.ubuntu\.com)[^\s]+%$1http://archive.ubuntu.com/ubuntu/%' /etc/apt/sources.list
         sudo apt update

    
      - name: Setup Disk & Swap Space 💿
        if: runner.name == 'ubuntu-latest' || runner.name == 'ubuntu-20.04'
        run: |
         echo Before:
         free -h
         df -h
         echo
         echo
         sudo swapoff /mnt/swapfile
         sudo rm /mnt/swapfile
         sudo fallocate -l 10G /mnt/swapfile
         sudo chmod 600 /mnt/swapfile
         sudo mkswap /mnt/swapfile
         sudo swapon /mnt/swapfile
         sudo apt remove -y '^dotnet-.*' '^llvm-.*' '^php.*' '^mongodb-.*' '^mysql-.*' azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri
         sudo apt autoremove -y
         sudo apt clean
         sudo rm -rf /usr/share/dotnet
         sudo rm -rf /usr/local/lib/android
         sudo rm -rf /usr/local/graalvm
         sudo rm -rf /usr/local/share/powershell
         sudo rm -rf /usr/local/share/chromium
         sudo rm -rf /usr/local/lib/node_modules
         sudo rm -rf /opt/ghc
         sudo rm -rf /usr/local/share/boost
         sudo rm -rf "$AGENT_TOOLSDIRECTORY"
         sudo fallocate -l 10G /home/runner/swapfile2
         sudo chmod 600 /home/runner/swapfile2
         sudo mkswap /home/runner/swapfile2
         sudo swapon /home/runner/swapfile2
         echo
         echo
         echo After:
         free -h
         df -h
      - name: Create environment 🌲
        run: |
         sudo apt update
         sudo apt install xvfb
         git clone https://github.com/floorp-projects/l10n-central.git
         ./mach --no-interactive bootstrap --application-choice browser
         echo 'ac_add_options --with-app-name=floorp' >> mozconfig
         echo 'ac_add_options --with-app-basename=Floorp' >> mozconfig
         echo 'ac_add_options --with-branding=browser/branding/official' >> mozconfig
         echo 'ac_add_options --disable-crashreporter' >> mozconfig
         echo 'ac_add_options --enable-proxy-bypass-protection' >> mozconfig
         echo 'ac_add_options --enable-unverified-updates' >> mozconfig
         echo 'ac_add_options --enable-update-channel=release' >> mozconfig
         echo 'ac_add_options --with-mozilla-api-keyfile=$PWD/floorp/apis/api-mozilla-key' >> mozconfig
         echo 'ac_add_options --with-google-location-service-api-keyfile=$PWD/floorp/apis/api-google-location-service-key' >> mozconfig
         echo 'ac_add_options --with-google-safebrowsing-api-keyfile=$PWD/floorp/apis/api-google-safe-browsing-key' >> mozconfig
         echo 'ac_add_options --enable-bootstrap' >> mozconfig
         echo 'ac_add_options --with-l10n-base=$PWD/l10n-central/l10n-central' >> mozconfig
         echo 'ac_add_options --enable-optimize="-O3"' >> mozconfig
         echo 'ac_add_options --enable-lto' >> mozconfig
         echo 'ac_add_options MOZ_PGO=1' >> mozconfig
         echo 'export RUSTC_OPT_LEVEL=2 '>> mozconfig
         echo 'export MOZ_INCLUDE_SOURCE_INFO=1' >> mozconfig
         echo 'MOZ_REQUIRE_SIGNING=' >> mozconfig
         echo 'MOZ_DATA_REPORTING=' >> mozconfig
         echo 'MOZ_TELEMETRY_REPORTING=' >> mozconfig
         ./mach configure

      - name: Build 🔨
        run: |
         Xvfb :2 -screen 0 1024x768x24 &
         export DISPLAY=:2
         rm -rf ./l10n-central/.git
         ./mach build

      - name: Package 📦
        run: |
         export MOZ_CHROME_MULTILOCALE="ar cs da de el en-GB en-US es-ES es-MX fr hu id it ja ko lt nl nn-NO pl pt-BR pt-PT ru sv-SE th vi zh-CN zh-TW"
         for AB_CD in $MOZ_CHROME_MULTILOCALE; do    ./mach build chrome-$AB_CD; done
         AB_CD=multi ./mach package
         zip -r dist.zip obj-x86_64-pc-linux-gnu/dist/*.tar.bz2

      - name: Publish 🎁
        uses: actions/upload-artifact@v1
        with:
         name: floorp-linux-x64
         path: dist.zip

  build-linux-aarch64:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
  
      - name: Change PPA mirror servers
        run: |
          sudo perl -p -i -e 's%(deb(?:-src|)\s+)https?://(?!archive\.canonical\.com|security\.ubuntu\.com)[^\s]+%$1http://archive.ubuntu.com/ubuntu/%' /etc/apt/sources.list
          sudo apt update
  
      - name: Setup Disk & Swap Space 💿
        if: runner.name == 'ubuntu-latest' || runner.name == 'ubuntu-20.04'
        run: |
          echo Before:
          free -h
          df -h
          echo
          echo
          sudo swapoff /mnt/swapfile
          sudo rm /mnt/swapfile
          sudo fallocate -l 10G /mnt/swapfile
          sudo chmod 600 /mnt/swapfile
          sudo mkswap /mnt/swapfile
          sudo swapon /mnt/swapfile
          sudo apt remove -y '^dotnet-.*' '^llvm-.*' '^php.*' '^mongodb-.*' '^mysql-.*' azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri
          sudo apt autoremove -y
          sudo apt clean
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/local/graalvm
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo fallocate -l 10G /home/runner/swapfile2
          sudo chmod 600 /home/runner/swapfile2
          sudo mkswap /home/runner/swapfile2
          sudo swapon /home/runner/swapfile2
          echo
          echo
          echo After:
          free -h
          df -h
  
      - name: Prepare cross compiler ⚒
        run: |
          sudo apt update
          sudo apt -y install gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu
  
      - name: Create environment 🌲
        run: |
          sudo apt install xvfb
          git clone https://github.com/floorp-projects/l10n-central.git
          ./mach --no-interactive bootstrap --application-choice browser
          echo 'ac_add_options --with-app-name=floorp' >> mozconfig
          echo 'ac_add_options --with-app-basename=Floorp' >> mozconfig
          echo 'ac_add_options --with-branding=browser/branding/official' >> mozconfig
          echo 'ac_add_options --disable-crashreporter' >> mozconfig
          echo 'ac_add_options --enable-proxy-bypass-protection' >> mozconfig
          echo 'ac_add_options --enable-unverified-updates' >> mozconfig
          echo 'ac_add_options --enable-update-channel=release' >> mozconfig
          echo 'ac_add_options --with-mozilla-api-keyfile=$PWD/floorp/apis/api-mozilla-key' >> mozconfig
          echo 'ac_add_options --with-google-location-service-api-keyfile=$PWD/floorp/apis/api-google-location-service-key' >> mozconfig
          echo 'ac_add_options --with-google-safebrowsing-api-keyfile=$PWD/floorp/apis/api-google-safe-browsing-key' >> mozconfig
          echo 'ac_add_options --enable-bootstrap' >> mozconfig
          echo 'ac_add_options --with-l10n-base=$PWD/l10n-central/l10n-central' >> mozconfig
          echo 'ac_add_options --enable-rust-simd' >> mozconfig
          echo 'ac_add_options --target=aarch64-unknown-linux-gnu' >> mozconfig
          echo 'ac_add_options --enable-linker=lld' >> mozconfig
          echo 'ac_add_options --enable-optimize="-O3"' >> mozconfig
          echo 'ac_add_options --enable-lto' >> mozconfig
          echo 'export RUSTC_OPT_LEVEL=2 '>> mozconfig
          echo 'export MOZ_INCLUDE_SOURCE_INFO=1' >> mozconfig
          echo 'MOZ_REQUIRE_SIGNING=' >> mozconfig
          echo 'MOZ_DATA_REPORTING=' >> mozconfig
          echo 'MOZ_TELEMETRY_REPORTING=' >> mozconfig
          ./mach configure
  
      - name: Build 🔨
        run: |        
          Xvfb :2 -screen 0 1024x768x24 &
          export DISPLAY=:2
          ./mach build
  
      - name: Package 📦
        run: |
          export MOZ_CHROME_MULTILOCALE="ar cs da de el en-GB en-US es-ES es-MX fr hu id it ja ko lt nl nn-NO pl pt-BR pt-PT ru sv-SE th vi zh-CN zh-TW"
          for AB_CD in $MOZ_CHROME_MULTILOCALE; do    ./mach build chrome-$AB_CD; done
          AB_CD=multi ./mach package
          zip -r dist.zip obj-aarch64-unknown-linux-gnu/dist/*.tar.bz2
  
      - name: Publish 🎁
        uses: actions/upload-artifact@v1
        with:
          name: floorp-linux-aarch64
          path: dist.zip
  get-buildid:
    runs-on: ubuntu-latest

    outputs:
      buildids: ${{ steps.get.outputs.bid }}
    steps:
    - id: get
      shell: bash -xe {0}
      run: |
        bdat=`date +"%Y%m%d%I%M%S"`
        echo "bid=${bdat}" >> $GITHUB_OUTPUT
  build-m1:
    runs-on: macos-latest

    needs: get-buildid

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Create environment 🌲
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}
        git clone https://github.com/floorp-projects/l10n-central
        brew update
        brew upgrade
        ./mach --no-interactive bootstrap --application-choice browser
        rustup target add aarch64-apple-darwin
        echo 'ac_add_options --disable-tests' >> mozconfig
        echo 'ac_add_options --disable-updater' >> mozconfig
        echo 'ac_add_options --with-app-name=floorp' >> mozconfig
        echo 'ac_add_options --with-app-basename=Floorp' >> mozconfig
        echo 'ac_add_options --with-branding=browser/branding/official' >> mozconfig
        echo 'ac_add_options --disable-crashreporter' >> mozconfig
        echo 'ac_add_options --enable-proxy-bypass-protection' >> mozconfig
        echo 'ac_add_options --enable-unverified-updates' >> mozconfig
        echo 'ac_add_options --enable-update-channel=release' >> mozconfig
        echo 'ac_add_options --with-mozilla-api-keyfile=$PWD/floorp/apis/api-mozilla-key' >> mozconfig
        echo 'ac_add_options --with-google-location-service-api-keyfile=$PWD/floorp/apis/api-google-location-service-key' >> mozconfig
        echo 'ac_add_options --with-google-safebrowsing-api-keyfile=$PWD/floorp/apis/api-google-safe-browsing-key' >> mozconfig
        echo 'ac_add_options --with-l10n-base=$PWD/l10n-central/l10n-central' >> mozconfig
        echo 'ac_add_options --enable-bootstrap' >> mozconfig
        echo 'ac_add_options --target=aarch64-apple-darwin' >> mozconfig
        echo 'ac_add_options --enable-optimize="-O2"' >> mozconfig
        echo 'ac_add_options --enable-rust-simd' >> mozconfig
        echo 'ac_add_options RUSTC_OPT_LEVEL=3' >> mozconfig
        echo 'MOZ_REQUIRE_SIGNING=' >> mozconfig
        echo 'MOZ_DATA_REPORTING=' >> mozconfig
        echo 'MOZ_TELEMETRY_REPORTING=' >> mozconfig
        ./mach configure

    - name: Build 🔨
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}
        ./mach build

    - name: Package 📦
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}
        ./mach package
        ./mach package-multi-locale --locales ar cs da de el en-GB en-US es-ES es-MX fr hu id it ja ko lt nl nn-NO pl pt-BR pt-PT ru sv-SE th vi zh-CN zh-TW
        tar -Jcf obj-aarch64-apple-darwin.tar.xz obj-aarch64-apple-darwin/dist/

    - name: Publish 🎁
      uses: actions/upload-artifact@v3
      with:
        name: obj-aarch64-apple-darwin
        path: obj-aarch64-apple-darwin.tar.xz

  build-intel:
    runs-on: macos-latest

    needs: get-buildid

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10' 

    - name: Create environment 🌲
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}
        git clone https://github.com/floorp-projects/l10n-central
        brew update
        brew upgrade
        ./mach --no-interactive bootstrap --application-choice browser
        echo 'ac_add_options --disable-tests' >> mozconfig
        echo 'ac_add_options --disable-updater' >> mozconfig
        echo 'ac_add_options --with-app-name=floorp' >> mozconfig
        echo 'ac_add_options --with-app-basename=Floorp' >> mozconfig
        echo 'ac_add_options --with-branding=browser/branding/official' >> mozconfig
        echo 'ac_add_options --disable-crashreporter' >> mozconfig
        echo 'ac_add_options --enable-proxy-bypass-protection' >> mozconfig
        echo 'ac_add_options --enable-unverified-updates' >> mozconfig
        echo 'ac_add_options --enable-update-channel=release' >> mozconfig
        echo 'ac_add_options --with-mozilla-api-keyfile=$PWD/floorp/apis/api-mozilla-key' >> mozconfig
        echo 'ac_add_options --with-google-location-service-api-keyfile=$PWD/floorp/apis/api-google-location-service-key' >> mozconfig
        echo 'ac_add_options --with-google-safebrowsing-api-keyfile=$PWD/floorp/apis/api-google-safe-browsing-key' >> mozconfig
        echo 'ac_add_options --with-l10n-base=$PWD/l10n-central/l10n-central' >> mozconfig
        echo 'ac_add_options --enable-bootstrap' >> mozconfig
        echo 'ac_add_options --target=x86_64-apple-darwin' >> mozconfig
        echo 'ac_add_options --enable-optimize="-O2"' >> mozconfig
        echo 'ac_add_options --enable-rust-simd' >> mozconfig
        echo 'ac_add_options RUSTC_OPT_LEVEL=3' >> mozconfig
        echo 'MOZ_REQUIRE_SIGNING=' >> mozconfig
        echo 'MOZ_DATA_REPORTING=' >> mozconfig
        echo 'MOZ_TELEMETRY_REPORTING=' >> mozconfig
        ./mach configure

    - name: Build 🔨
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}
        ./mach build

    - name: Package 📦
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}
        ./mach package
        ./mach package-multi-locale --locales ar cs da de el en-GB en-US es-ES es-MX fr hu id it ja ko lt nl nn-NO pl pt-BR pt-PT ru sv-SE th vi zh-CN zh-TW
        tar -Jcf obj-x86_64-apple-darwin.tar.xz obj-x86_64-apple-darwin/dist/

    - name: Publish 🎁
      uses: actions/upload-artifact@v3
      with:
        name: obj-x86_64-apple-darwin
        path: obj-x86_64-apple-darwin.tar.xz

  integration:
    needs: [build-m1, build-intel]
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10' 

    - name: Create environment 🌲
      shell: bash
      run: |
        ./mach bootstrap
        echo -e "ac_add_options --enable-bootstrap" >> mozconfig
        brew install gnu-tar
        export PATH=/usr/local/opt/gnu-tar/libexec/gnubin:$PATH
        tar -xf ./obj-x86_64-apple-darwin/obj-x86_64-apple-darwin.tar.xz -C ./
        tar -xf ./obj-aarch64-apple-darwin/obj-aarch64-apple-darwin.tar.xz -C ./
        ls -a

    - name: Integration 🗃 & Package 📦 
      run: |
        ./mach python ./toolkit/mozapps/installer/unify.py ./obj-x86_64-apple-darwin/dist/Floorp/Floorp.app ./obj-aarch64-apple-darwin/dist/Floorp/Floorp.app
        ./mach python -m mozbuild.action.make_dmg ./obj-x86_64-apple-darwin/dist/Floorp floorp-macOS-universal-temp.dmg
        unzip ./.github/base.zip
        hdiutil attach ./floorp-macOS-universal-temp.dmg
        hdiutil attach ./base.dmg
        cp -r /Volumes/Floorp/Floorp.app /Volumes/Floorp\ Installer/
        hdiutil detach /Volumes/Floorp\ Installer/
        hdiutil convert ./base.dmg -format UDZO -imagekey zlib-level=9 -o floorp-macOS-universal.dmg

    - name: Publish 🎁
      uses: actions/upload-artifact@v3
      with:
        name: Universal-Artifact
        path: floorp-macOS-universal.dmg

  cleanup-darwin-artifact:
    needs: integration
    runs-on: ubuntu-latest
    steps:
    - uses: geekyeggo/delete-artifact@v2
      with:
        name: |
         obj-x86_64-apple-darwin
         obj-aarch64-apple-darwin

  Deployments:
    needs: [build-linux-x86_64-with-PGO, build-linux-aarch64, integration , build-with-profdata-and-jarlog]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3